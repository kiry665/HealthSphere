using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace HealthSphere.Windows
{
    /// <summary>
    /// Логика взаимодействия для PatientInfoWindow.xaml
    /// </summary>
    public partial class PatientInfoWindow : Window
    {
        private int id;
        public PatientInfoWindow()
        {
            InitializeComponent();
        }
        public PatientInfoWindow(int id, string fio, string date, string sex, int policy)
        {
            InitializeComponent();
            fio_TB.Text = fio;
            this.id = id;
            CreateTables();
        }

        private void CreateTables()
        {
            using (ApplicationContext db = new ApplicationContext())
            {
                var records = db.records.Where(r => r.patientid == id).Include(r => r.doctor).ThenInclude(d => d.specialization).ToList();
                Table_History.ItemsSource = records;
                Table_Current.ItemsSource = records.Where(r => r.time < TimeOnly.FromDateTime(DateTime.Now));
            }
        }

        private void Table_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            var prop = e.PropertyDescriptor as PropertyDescriptor;
            if (prop != null)
            {
                e.Column.Header = prop.DisplayName;
            }

            if (prop.Name == "doctor")
            {
                e.Column = new DataGridTextColumn
                {
                    Header = "Доктор",
                    Binding = new Binding("doctor.fio"),
                    IsReadOnly = true
                };
            }

            if (prop.Name == "specialization")
            {
                MessageBox.Show("Here");
            }

            if (prop.PropertyType == typeof(DateOnly))
            {
                DataGridTextColumn textColumn = e.Column as DataGridTextColumn;
                if (textColumn != null)
                {
                    textColumn.Binding.StringFormat = "dd.MM.yyyy";
                }
            }

            if (new[] { "patientid", "doctorid" }.Contains(prop.Name))
            {
                e.Cancel = true;
            }

            if (prop.PropertyType == typeof(TimeOnly))
            {
                DataGridTextColumn textColumn = e.Column as DataGridTextColumn;
                if (textColumn != null)
                {
                    Binding binding = (Binding)textColumn.Binding;
                    binding.StringFormat = "HH:mm";
                }
            }
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            RecordWindow window = new RecordWindow(fio_TB.Text);
            window.Show();
            window.Closed += (sender, e) => { CreateTables(); };
        }

        private void ButtonCancel_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;
            if(button != null)
            {
                Records rec = button.DataContext as Records;
                MessageBoxResult result = MessageBox.Show($"Отменить запись на {rec.date} {rec.time}", "Отмена записи", MessageBoxButton.YesNo);
                if(result == MessageBoxResult.Yes)
                {
                    using(ApplicationContext db = new ApplicationContext())
                    {
                        var recordRemove = db.records.FirstOrDefault(r => r.id == rec.id);
                        if(recordRemove != null)
                        {
                            db.records.Remove(recordRemove);
                            db.SaveChanges();
                            CreateTables();
                        }
                    }
                }
            }
        }

        private void Table_Current_AutoGeneratedColumns(object sender, EventArgs e)
        {
            Table_Current.Columns[0].DisplayIndex = Table_Current.Columns.Count - 1;
            Table_Current.Columns[1].DisplayIndex = Table_Current.Columns.Count - 2;
        }

        private void Table_History_AutoGeneratedColumns(object sender, EventArgs e)
        {
            Table_History.Columns[0].DisplayIndex = Table_History.Columns.Count - 1;
        }
    }
}
